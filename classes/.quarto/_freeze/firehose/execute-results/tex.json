{
  "hash": "550ff4f6fcaba7d730c547f850e24bad",
  "result": {
    "markdown": "# Drinking from the Firehose\n\n> This notebook translates the R code in [Chapter 2: Drinking from the Firehose](https://tellingstorieswithdata.com/02-drinking_from_a_fire_hose.html) to Python.\n\n## Examples in Python\n\n## Setup\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nfrom io import StringIO\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom janitor import clean_names, remove_empty\nfrom datetime import datetime, timedelta\nfrom TorontoOpenData import TorontoOpenData\nimport requests\n\nfrom qrm3440 import set_style\nset_style()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/root/.cache/pypoetry/virtualenvs/qrm3440-djWU9zOu-py3.12/lib/python3.12/site-packages/ckanapi/version.py:1: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n  import pkg_resources\n```\n:::\n:::\n\n\n## Australian Elections\n\n### Simulate\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nnp.random.seed(853)\n\nsimulated_election_data = {\n    \"Division\": range(1, 152),\n    \"Party\": np.random.choice(\n        [\"Liberal\", \"Labour\", \"National\", \"Green\", \"Other\"],\n        size = 151,\n        replace = True\n    )\n}\n\nsimulated_election_data = pd.DataFrame(simulated_election_data)\nsimulated_election_data.sample(10)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Division</th>\n      <th>Party</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>118</th>\n      <td>119</td>\n      <td>Other</td>\n    </tr>\n    <tr>\n      <th>121</th>\n      <td>122</td>\n      <td>National</td>\n    </tr>\n    <tr>\n      <th>104</th>\n      <td>105</td>\n      <td>Liberal</td>\n    </tr>\n    <tr>\n      <th>132</th>\n      <td>133</td>\n      <td>National</td>\n    </tr>\n    <tr>\n      <th>136</th>\n      <td>137</td>\n      <td>Other</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>24</td>\n      <td>Other</td>\n    </tr>\n    <tr>\n      <th>107</th>\n      <td>108</td>\n      <td>National</td>\n    </tr>\n    <tr>\n      <th>56</th>\n      <td>57</td>\n      <td>Liberal</td>\n    </tr>\n    <tr>\n      <th>101</th>\n      <td>102</td>\n      <td>Green</td>\n    </tr>\n    <tr>\n      <th>93</th>\n      <td>94</td>\n      <td>Liberal</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Acquire\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndata_url = \"https://results.aec.gov.au/27966/website/Downloads/HouseMembersElectedDownload-27966.csv\"\n\nraw_elections_data = pd.read_csv(data_url, skiprows=1)\nraw_elections_data.to_csv(\"data/australian_voting.csv\", index=False)\n\nraw_elections_data.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 151 entries, 0 to 150\nData columns (total 8 columns):\n #   Column       Non-Null Count  Dtype \n---  ------       --------------  ----- \n 0   DivisionID   151 non-null    int64 \n 1   DivisionNm   151 non-null    object\n 2   StateAb      151 non-null    object\n 3   CandidateID  151 non-null    int64 \n 4   GivenNm      151 non-null    object\n 5   Surname      151 non-null    object\n 6   PartyNm      151 non-null    object\n 7   PartyAb      151 non-null    object\ndtypes: int64(2), object(6)\nmemory usage: 9.6+ KB\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nraw_elections_data.sample(10)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>DivisionID</th>\n      <th>DivisionNm</th>\n      <th>StateAb</th>\n      <th>CandidateID</th>\n      <th>GivenNm</th>\n      <th>Surname</th>\n      <th>PartyNm</th>\n      <th>PartyAb</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>41</th>\n      <td>252</td>\n      <td>Dickson</td>\n      <td>QLD</td>\n      <td>37493</td>\n      <td>Peter</td>\n      <td>DUTTON</td>\n      <td>Liberal National Party of Queensland</td>\n      <td>LNP</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>112</td>\n      <td>Cook</td>\n      <td>NSW</td>\n      <td>37025</td>\n      <td>Scott</td>\n      <td>MORRISON</td>\n      <td>Liberal</td>\n      <td>LP</td>\n    </tr>\n    <tr>\n      <th>45</th>\n      <td>117</td>\n      <td>Eden-Monaro</td>\n      <td>NSW</td>\n      <td>36803</td>\n      <td>Kristy</td>\n      <td>McBAIN</td>\n      <td>Australian Labor Party</td>\n      <td>ALP</td>\n    </tr>\n    <tr>\n      <th>71</th>\n      <td>165</td>\n      <td>Herbert</td>\n      <td>QLD</td>\n      <td>37471</td>\n      <td>Phillip</td>\n      <td>THOMPSON</td>\n      <td>Liberal National Party of Queensland</td>\n      <td>LNP</td>\n    </tr>\n    <tr>\n      <th>131</th>\n      <td>250</td>\n      <td>Riverina</td>\n      <td>NSW</td>\n      <td>36324</td>\n      <td>Michael</td>\n      <td>McCORMACK</td>\n      <td>The Nationals</td>\n      <td>NP</td>\n    </tr>\n    <tr>\n      <th>50</th>\n      <td>161</td>\n      <td>Fisher</td>\n      <td>QLD</td>\n      <td>37504</td>\n      <td>Andrew</td>\n      <td>WALLACE</td>\n      <td>Liberal National Party of Queensland</td>\n      <td>LNP</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>158</td>\n      <td>Dawson</td>\n      <td>QLD</td>\n      <td>37485</td>\n      <td>Andrew</td>\n      <td>WILLCOX</td>\n      <td>Liberal National Party of Queensland</td>\n      <td>LNP</td>\n    </tr>\n    <tr>\n      <th>106</th>\n      <td>315</td>\n      <td>McMahon</td>\n      <td>NSW</td>\n      <td>36815</td>\n      <td>Chris</td>\n      <td>BOWEN</td>\n      <td>Australian Labor Party</td>\n      <td>ALP</td>\n    </tr>\n    <tr>\n      <th>133</th>\n      <td>177</td>\n      <td>Ryan</td>\n      <td>QLD</td>\n      <td>37370</td>\n      <td>Elizabeth</td>\n      <td>WATSON-BROWN</td>\n      <td>The Greens</td>\n      <td>GRN</td>\n    </tr>\n    <tr>\n      <th>81</th>\n      <td>219</td>\n      <td>Isaacs</td>\n      <td>VIC</td>\n      <td>36434</td>\n      <td>Mark</td>\n      <td>DREYFUS</td>\n      <td>Australian Labor Party</td>\n      <td>ALP</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe can do a bit of cleaning using `janitor`. \n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ncleaned_elections_data = clean_names(raw_elections_data)\nprint(cleaned_elections_data.head(10))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   divisionid divisionnm stateab  candidateid           givennm    surname  \\\n0         179   Adelaide      SA        36973             Steve  GEORGANAS   \n1         197      Aston     VIC        36704              Alan      TUDGE   \n2         198   Ballarat     VIC        36409         Catherine       KING   \n3         103      Banks     NSW        37018             David    COLEMAN   \n4         180     Barker      SA        37083              Tony      PASIN   \n5         104     Barton     NSW        36820             Linda     BURNEY   \n6         192       Bass     TAS        37134  Bridget Kathleen     ARCHER   \n7         318       Bean     ACT        36231             David      SMITH   \n8         200    Bendigo     VIC        36424              Lisa   CHESTERS   \n9         105  Bennelong     NSW        36827            Jerome     LAXALE   \n\n                  partynm partyab  \n0  Australian Labor Party     ALP  \n1                 Liberal      LP  \n2  Australian Labor Party     ALP  \n3                 Liberal      LP  \n4                 Liberal      LP  \n5  Australian Labor Party     ALP  \n6                 Liberal      LP  \n7  Australian Labor Party     ALP  \n8  Australian Labor Party     ALP  \n9  Australian Labor Party     ALP  \n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ncleaned_elections_data = cleaned_elections_data[[\"divisionnm\", \"partynm\"]]\n\ncleaned_elections_data.sample(10)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>divisionnm</th>\n      <th>partynm</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Adelaide</td>\n      <td>Australian Labor Party</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Ballarat</td>\n      <td>Australian Labor Party</td>\n    </tr>\n    <tr>\n      <th>50</th>\n      <td>Fisher</td>\n      <td>Liberal National Party of Queensland</td>\n    </tr>\n    <tr>\n      <th>142</th>\n      <td>Wannon</td>\n      <td>Liberal</td>\n    </tr>\n    <tr>\n      <th>49</th>\n      <td>Fenner</td>\n      <td>Australian Labor Party</td>\n    </tr>\n    <tr>\n      <th>92</th>\n      <td>Lingiari</td>\n      <td>Australian Labor Party</td>\n    </tr>\n    <tr>\n      <th>65</th>\n      <td>Greenway</td>\n      <td>Australian Labor Party</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Bennelong</td>\n      <td>Australian Labor Party</td>\n    </tr>\n    <tr>\n      <th>69</th>\n      <td>Hasluck</td>\n      <td>Australian Labor Party</td>\n    </tr>\n    <tr>\n      <th>119</th>\n      <td>O'Connor</td>\n      <td>Liberal</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nprint(cleaned_elections_data.columns)\n\ncleaned_elections_data = cleaned_elections_data.rename(columns={\n    \"divisionnm\": \"division\",\n    \"partynm\": \"elected_party\"\n})\n\ncleaned_elections_data.sample(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIndex(['divisionnm', 'partynm'], dtype='object')\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>division</th>\n      <th>elected_party</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>32</th>\n      <td>Cooper</td>\n      <td>Australian Labor Party</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>Braddon</td>\n      <td>Liberal</td>\n    </tr>\n    <tr>\n      <th>129</th>\n      <td>Reid</td>\n      <td>Australian Labor Party</td>\n    </tr>\n    <tr>\n      <th>128</th>\n      <td>Rankin</td>\n      <td>Australian Labor Party</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>Corangamite</td>\n      <td>Australian Labor Party</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Blair</td>\n      <td>Australian Labor Party</td>\n    </tr>\n    <tr>\n      <th>57</th>\n      <td>Fraser</td>\n      <td>Australian Labor Party</td>\n    </tr>\n    <tr>\n      <th>45</th>\n      <td>Eden-Monaro</td>\n      <td>Australian Labor Party</td>\n    </tr>\n    <tr>\n      <th>109</th>\n      <td>Menzies</td>\n      <td>Liberal</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>Burt</td>\n      <td>Australian Labor Party</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ncleaned_elections_data[\"elected_party\"].unique()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\narray(['Australian Labor Party', 'Liberal',\n       'Liberal National Party of Queensland', 'The Greens',\n       'The Nationals', 'Independent', \"Katter's Australian Party (KAP)\",\n       'Centre Alliance'], dtype=object)\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nparty_map = {\n    \"Australian Labor Party\": \"Labor\",\n    \"Liberal National Party of Queensland\": \"Liberal\",\n    \"Liberal\": \"Liberal\",\n    \"The Nationals\": \"Nationals\",\n    \"The Greens\": \"Greens\",\n    \"Independent\": \"Other\",\n    \"Katter's Australian Party (KAP)\": \"Other\",\n    \"Centre Alliance\": \"Other\"\n}\n\ncleaned_elections_data[\"elected_party\"] = cleaned_elections_data[\"elected_party\"].map(party_map)\n\ncleaned_elections_data.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>division</th>\n      <th>elected_party</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Adelaide</td>\n      <td>Labor</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Aston</td>\n      <td>Liberal</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Ballarat</td>\n      <td>Labor</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Banks</td>\n      <td>Liberal</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Barker</td>\n      <td>Liberal</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ncleaned_elections_data.to_csv(\"data/cleaned_elections_data.csv\", index=False)\n```\n:::\n\n\n### Explore\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ncleaned_elections_data = pd.read_csv(\"data/cleaned_elections_data.csv\")\n```\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ncleaned_elections_data[\"elected_party\"].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\nelected_party\nLabor        77\nLiberal      48\nOther        12\nNationals    10\nGreens        4\nName: count, dtype: int64\n```\n:::\n:::\n\n\nLet's create our first plot!\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nplt.figure(figsize=(10, 6))\n\nsns.countplot(\n    x=\"elected_party\", \n    data=cleaned_elections_data\n)\n\nplt.title(\"No. of seats won by political party\\nin the 2022 Australian Federal Election\\n\", loc='left')\n\nplt.xlabel(\"\")\nplt.ylabel(\"Number of seats\\n\")\n\nplt.tight_layout()\n\nplt.savefig(\n    'figures/australian_election_2022.png', dpi=300\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/usr/lib/python3.12/site-packages/IPython/core/pylabtools.py:77: DeprecationWarning: backend2gui is deprecated since IPython 8.24, backends are managed in matplotlib and can be externally registered.\n  warnings.warn(\n/usr/lib/python3.12/site-packages/IPython/core/pylabtools.py:77: DeprecationWarning: backend2gui is deprecated since IPython 8.24, backends are managed in matplotlib and can be externally registered.\n  warnings.warn(\n/tmp/ipykernel_4236/2891693074.py:13: UserWarning: The figure layout has changed to tight\n  plt.tight_layout()\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n/usr/lib/python3.12/site-packages/IPython/core/pylabtools.py:77: DeprecationWarning: backend2gui is deprecated since IPython 8.24, backends are managed in matplotlib and can be externally registered.\n  warnings.warn(\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](firehose_files/figure-pdf/cell-14-output-3.pdf){fig-pos='H'}\n:::\n:::\n\n\n### Share\n\n> Australia is a parliamentary democracy with 151 seats in the House of Representatives, which is the house from which government is formed. There are two major parties---\"Liberal\" and \"Labor\"---two minor parties---\"Nationals\" and \"Greens\"---and many smaller parties. The 2022 Federal Election occurred on 21 May, and around 15 million votes were cast. We were interested in the number of seats that were won by each party.\n> We downloaded the results, on a seat-specific basis, from the Australian Electoral Commission website. We cleaned and tidied the dataset using Python and libraries including pandas, numpy, matplotlib, and seaborn. We then created a graph of the number of seats that each political party won.\n> We found that the Labor Party won 77 seats, followed by the Liberal Party with 48 seats. The minor parties won the following number of seats: the Nationals won 10 seats and the Greens won 4 seats. Finally, there were 10 Independents elected as well as candidates from smaller parties.\n> The distribution of seats is skewed toward the two major parties which could reflect relatively stable preferences on the part of Australian voters, or possibly inertia due to the benefits of already being a major party such a national network or funding. A better understanding of the reasons for this distribution are of interest in future work. While the dataset consists of everyone who voted, it worth noting that in Australia some are systematically excluded from voting, and it is much more difficult for some to vote than others.\n\n## Toronto's unhoused population\n\n### Simulate\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nnp.random.seed(853)\n\nstart_date = datetime(2021, 1, 1)\ndates = [start_date + timedelta(days=i) for i in range(365)]\n\nsimulated_occupancy_data = pd.DataFrame({\n    'date': dates * 3,\n    'shelter': ['Shelter 1'] * 365 + ['Shelter 2'] * 365 + ['Shelter 3'] * 365,\n    'number_occupied': np.random.poisson(lam=30, size=365*3)\n})\n\nsimulated_occupancy_data.sample(10)\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>shelter</th>\n      <th>number_occupied</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1024</th>\n      <td>2021-10-22</td>\n      <td>Shelter 3</td>\n      <td>31</td>\n    </tr>\n    <tr>\n      <th>87</th>\n      <td>2021-03-29</td>\n      <td>Shelter 1</td>\n      <td>24</td>\n    </tr>\n    <tr>\n      <th>335</th>\n      <td>2021-12-02</td>\n      <td>Shelter 1</td>\n      <td>34</td>\n    </tr>\n    <tr>\n      <th>465</th>\n      <td>2021-04-11</td>\n      <td>Shelter 2</td>\n      <td>25</td>\n    </tr>\n    <tr>\n      <th>612</th>\n      <td>2021-09-05</td>\n      <td>Shelter 2</td>\n      <td>29</td>\n    </tr>\n    <tr>\n      <th>137</th>\n      <td>2021-05-18</td>\n      <td>Shelter 1</td>\n      <td>40</td>\n    </tr>\n    <tr>\n      <th>108</th>\n      <td>2021-04-19</td>\n      <td>Shelter 1</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>279</th>\n      <td>2021-10-07</td>\n      <td>Shelter 1</td>\n      <td>34</td>\n    </tr>\n    <tr>\n      <th>286</th>\n      <td>2021-10-14</td>\n      <td>Shelter 1</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>713</th>\n      <td>2021-12-15</td>\n      <td>Shelter 2</td>\n      <td>36</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Acquire\n\nThe data is available [here](https://open.toronto.ca/dataset/daily-shelter-overnight-service-occupancy-capacity/).\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\ntod = TorontoOpenData()\n\nsearch_results = tod.search_datasets('daily-shelter-overnight-service-occupancy-capacity-2021')\nsearch_results\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>author</th>\n      <th>author_email</th>\n      <th>creator_user_id</th>\n      <th>dataset_category</th>\n      <th>date_published</th>\n      <th>excerpt</th>\n      <th>formats</th>\n      <th>id</th>\n      <th>information_url</th>\n      <th>is_retired</th>\n      <th>...</th>\n      <th>type</th>\n      <th>version</th>\n      <th>resources</th>\n      <th>tags</th>\n      <th>groups</th>\n      <th>relationships_as_subject</th>\n      <th>relationships_as_object</th>\n      <th>civic_issues</th>\n      <th>owner_section</th>\n      <th>owner_unit</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>tsssdata@toronto.ca</td>\n      <td>tsssdata@toronto.ca</td>\n      <td>329e1506-b545-4fc7-a4ea-e614f220eea7</td>\n      <td>Table</td>\n      <td>2021-06-28 13:44:56.408963</td>\n      <td>Daily occupancy and capacity data for City of ...</td>\n      <td>JSON,CSV,XML</td>\n      <td>21c83b32-d5a8-4106-a54f-010dbe49f6f2</td>\n      <td>https://www.toronto.ca/city-government/data-re...</td>\n      <td>false</td>\n      <td>...</td>\n      <td>dataset</td>\n      <td>None</td>\n      <td>[{'cache_last_updated': None, 'cache_url': Non...</td>\n      <td>[{'display_name': 'shelter', 'id': '9863812a-8...</td>\n      <td>[]</td>\n      <td>[]</td>\n      <td>[]</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>tsssdata@toronto.ca</td>\n      <td>tsssdata@toronto.ca</td>\n      <td>329e1506-b545-4fc7-a4ea-e614f220eea7</td>\n      <td>Table</td>\n      <td>2019-07-23 17:00:10.298196</td>\n      <td>Daily occupancy of the City of Toronto shelters</td>\n      <td>CSV,XML,JSON</td>\n      <td>8a6eceb2-821b-4961-a29d-758f3087732d</td>\n      <td>https://www.toronto.ca/community-people/housin...</td>\n      <td>true</td>\n      <td>...</td>\n      <td>dataset</td>\n      <td>None</td>\n      <td>[{'cache_last_updated': None, 'cache_url': Non...</td>\n      <td>[{'display_name': 'homeless', 'id': '3af3eb57-...</td>\n      <td>[]</td>\n      <td>[]</td>\n      <td>[]</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>tsssdata@toronto.ca</td>\n      <td>tsssdata@toronto.ca</td>\n      <td>329e1506-b545-4fc7-a4ea-e614f220eea7</td>\n      <td>Document</td>\n      <td>2019-07-23 17:34:37.680334</td>\n      <td>The data set contains the location of the shel...</td>\n      <td>SHP,XLS</td>\n      <td>24b2b6ff-35b9-481d-9eb6-ba2e5e8b4dfb</td>\n      <td>http://www.toronto.ca/housing/about-hostel.htm</td>\n      <td>false</td>\n      <td>...</td>\n      <td>dataset</td>\n      <td>None</td>\n      <td>[{'cache_last_updated': None, 'cache_url': Non...</td>\n      <td>[{'display_name': 'homeless shelter', 'id': '3...</td>\n      <td>[]</td>\n      <td>[]</td>\n      <td>[]</td>\n      <td>affordable_housing</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>tsssdata@toronto.ca</td>\n      <td>tsssdata@toronto.ca</td>\n      <td>329e1506-b545-4fc7-a4ea-e614f220eea7</td>\n      <td>Document</td>\n      <td>2022-09-30 18:43:00.949324</td>\n      <td>This dataset includes a summary of responses f...</td>\n      <td>XLSX,XLS</td>\n      <td>5793a972-40fb-4e07-bc98-57c00590907a</td>\n      <td>https://www.toronto.ca/community-people/commun...</td>\n      <td>false</td>\n      <td>...</td>\n      <td>dataset</td>\n      <td>None</td>\n      <td>[{'cache_last_updated': None, 'cache_url': Non...</td>\n      <td>[]</td>\n      <td>[]</td>\n      <td>[]</td>\n      <td>[]</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>bikelocker@toronto.ca</td>\n      <td>bikelocker@toronto.ca</td>\n      <td>329e1506-b545-4fc7-a4ea-e614f220eea7</td>\n      <td>Map</td>\n      <td>2019-07-23 16:34:00.669785</td>\n      <td>A geospatial file that shows where all of the ...</td>\n      <td>CSV,SHP,JSON,GEOJSON,GPKG</td>\n      <td>2c32f356-e0ff-4245-84ba-cc3dd71a5694</td>\n      <td>http://www.toronto.ca/cycling</td>\n      <td>false</td>\n      <td>...</td>\n      <td>dataset</td>\n      <td>None</td>\n      <td>[{'cache_last_updated': None, 'cache_url': Non...</td>\n      <td>[{'display_name': 'bicycle parking', 'id': '8a...</td>\n      <td>[]</td>\n      <td>[]</td>\n      <td>[]</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>tsssdata@toronto.ca</td>\n      <td>tsssdata@toronto.ca</td>\n      <td>329e1506-b545-4fc7-a4ea-e614f220eea7</td>\n      <td>Table</td>\n      <td>2021-11-15 00:00:00</td>\n      <td>The report includes monthly data about people ...</td>\n      <td>JSON,CSV,XML</td>\n      <td>ac77f532-f18b-427c-905c-4ae87ce69c93</td>\n      <td>https://www.toronto.ca/city-government/data-re...</td>\n      <td>false</td>\n      <td>...</td>\n      <td>dataset</td>\n      <td>None</td>\n      <td>[{'cache_last_updated': None, 'cache_url': Non...</td>\n      <td>[{'display_name': 'affordable housing', 'id': ...</td>\n      <td>[]</td>\n      <td>[]</td>\n      <td>[]</td>\n      <td>NaN</td>\n      <td>SPI (Service Planning and Integrity)</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>opendata@toronto.ca</td>\n      <td>opendata@toronto.ca</td>\n      <td>329e1506-b545-4fc7-a4ea-e614f220eea7</td>\n      <td>Document</td>\n      <td>2019-07-23 17:59:05.514613</td>\n      <td>This dataset is a tabular file that outlines f...</td>\n      <td>XLSX,XLS</td>\n      <td>1643a780-b01c-4a1d-b6b3-2c0538d111b3</td>\n      <td>http://www.toronto.ca/housing/about-hostel.htm</td>\n      <td>false</td>\n      <td>...</td>\n      <td>dataset</td>\n      <td>None</td>\n      <td>[{'cache_last_updated': None, 'cache_url': Non...</td>\n      <td>[{'display_name': 'housing', 'id': '72f69466-9...</td>\n      <td>[]</td>\n      <td>[]</td>\n      <td>[]</td>\n      <td>Affordable housing,Poverty reduction</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Sandro.Tersigni@toronto.ca</td>\n      <td>Sandro.Tersigni@toronto.ca</td>\n      <td>329e1506-b545-4fc7-a4ea-e614f220eea7</td>\n      <td>Map</td>\n      <td>2019-07-23 18:03:41.634773</td>\n      <td>Transit shelter location and asset type data f...</td>\n      <td>GPKG,CSV,SHP,GEOJSON</td>\n      <td>1db34737-ffad-489d-a590-9171d500d453</td>\n      <td>NaN</td>\n      <td>false</td>\n      <td>...</td>\n      <td>dataset</td>\n      <td>None</td>\n      <td>[{'cache_last_updated': None, 'cache_url': Non...</td>\n      <td>[{'display_name': 'bus shelter', 'id': 'ded095...</td>\n      <td>[]</td>\n      <td>[]</td>\n      <td>[]</td>\n      <td>Mobility</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>opendata@toronto.ca</td>\n      <td>opendata@toronto.ca</td>\n      <td>329e1506-b545-4fc7-a4ea-e614f220eea7</td>\n      <td>Website</td>\n      <td>2019-07-23 17:00:02.089385</td>\n      <td>Number of client visits to Daily Bread Food Ba...</td>\n      <td>XLS,WEB</td>\n      <td>2d48a61d-da9b-4cfb-9dac-19f65492f756</td>\n      <td>http://www.toronto.ca/progressportal</td>\n      <td>true</td>\n      <td>...</td>\n      <td>dataset</td>\n      <td>None</td>\n      <td>[{'cache_last_updated': None, 'cache_url': Non...</td>\n      <td>[{'display_name': 'daily bread food bank', 'id...</td>\n      <td>[]</td>\n      <td>[]</td>\n      <td>[]</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>animalservices@toronto.ca</td>\n      <td>animalservices@toronto.ca</td>\n      <td>329e1506-b545-4fc7-a4ea-e614f220eea7</td>\n      <td>Document</td>\n      <td>2020-10-02 16:35:28.527043</td>\n      <td>The data includes requests for service regardi...</td>\n      <td>XLS</td>\n      <td>694b6a00-7850-4d2b-a2f4-0d6ab93f8883</td>\n      <td>http://www.toronto.ca/animalservices</td>\n      <td>false</td>\n      <td>...</td>\n      <td>dataset</td>\n      <td>None</td>\n      <td>[{'cache_last_updated': None, 'cache_url': Non...</td>\n      <td>[{'display_name': 'animals', 'id': '183cf169-0...</td>\n      <td>[]</td>\n      <td>[]</td>\n      <td>[]</td>\n      <td>NaN</td>\n      <td>Animal Services</td>\n      <td>Enforcement &amp; Mobile Response</td>\n    </tr>\n  </tbody>\n</table>\n<p>10 rows × 42 columns</p>\n</div>\n```\n:::\n:::\n\n\nWe can download the data we want using the `id`.\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ndid = '21c83b32-d5a8-4106-a54f-010dbe49f6f2'\ndownloaded_data = tod.download_dataset(did)\n\ndownloaded_data\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\r  0%|          | 0/16 [00:00<?, ?it/s]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r100%|██████████| 16/16 [00:00<00:00, 5850.82it/s]\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nFile cache/21c83b32-d5a8-4106-a54f-010dbe49f6f2/Daily shelter overnight occupancy.csv already exists. Skipping...\nFile cache/21c83b32-d5a8-4106-a54f-010dbe49f6f2/Daily shelter overnight occupancy.xml already exists. Skipping...\nFile cache/21c83b32-d5a8-4106-a54f-010dbe49f6f2/Daily shelter overnight occupancy.json already exists. Skipping...\nFile cache/21c83b32-d5a8-4106-a54f-010dbe49f6f2/daily-shelter-overnight-service-occupancy-capacity-2022.csv already exists. Skipping...\nFile cache/21c83b32-d5a8-4106-a54f-010dbe49f6f2/daily-shelter-overnight-service-occupancy-capacity-2022.xml already exists. Skipping...\nFile cache/21c83b32-d5a8-4106-a54f-010dbe49f6f2/daily-shelter-overnight-service-occupancy-capacity-2022.json already exists. Skipping...\nFile cache/21c83b32-d5a8-4106-a54f-010dbe49f6f2/daily-shelter-overnight-service-occupancy-capacity-2021.csv already exists. Skipping...\nFile cache/21c83b32-d5a8-4106-a54f-010dbe49f6f2/daily-shelter-overnight-service-occupancy-capacity-2021.xml already exists. Skipping...\nFile cache/21c83b32-d5a8-4106-a54f-010dbe49f6f2/daily-shelter-overnight-service-occupancy-capacity-2021.json already exists. Skipping...\nFile cache/21c83b32-d5a8-4106-a54f-010dbe49f6f2/daily-shelter-overnight-service-occupancy-capacity-2023.csv already exists. Skipping...\nFile cache/21c83b32-d5a8-4106-a54f-010dbe49f6f2/daily-shelter-overnight-service-occupancy-capacity-2023.xml already exists. Skipping...\nFile cache/21c83b32-d5a8-4106-a54f-010dbe49f6f2/daily-shelter-overnight-service-occupancy-capacity-2023.json already exists. Skipping...\n\nDownloaded 0 resources: []\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\n```\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\ndfn = \"daily-shelter-overnight-service-occupancy-capacity-2021.csv\"\ntoronto_shelters_2021 = tod.load(did, dfn, smart_return=True)\ntoronto_shelters_2021\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>_id</th>\n      <th>OCCUPANCY_DATE</th>\n      <th>ORGANIZATION_ID</th>\n      <th>ORGANIZATION_NAME</th>\n      <th>SHELTER_ID</th>\n      <th>SHELTER_GROUP</th>\n      <th>LOCATION_ID</th>\n      <th>LOCATION_NAME</th>\n      <th>LOCATION_ADDRESS</th>\n      <th>LOCATION_POSTAL_CODE</th>\n      <th>...</th>\n      <th>OCCUPIED_BEDS</th>\n      <th>UNOCCUPIED_BEDS</th>\n      <th>UNAVAILABLE_BEDS</th>\n      <th>CAPACITY_ACTUAL_ROOM</th>\n      <th>CAPACITY_FUNDING_ROOM</th>\n      <th>OCCUPIED_ROOMS</th>\n      <th>UNOCCUPIED_ROOMS</th>\n      <th>UNAVAILABLE_ROOMS</th>\n      <th>OCCUPANCY_RATE_BEDS</th>\n      <th>OCCUPANCY_RATE_ROOMS</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>21-01-01</td>\n      <td>24</td>\n      <td>COSTI Immigrant Services</td>\n      <td>40</td>\n      <td>COSTI Reception Centre</td>\n      <td>1103.0</td>\n      <td>COSTI/City North York West Hotel Program</td>\n      <td>1677 Wilson Ave</td>\n      <td>M3L 1A5</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>29.0</td>\n      <td>58.0</td>\n      <td>26.0</td>\n      <td>3.0</td>\n      <td>29.0</td>\n      <td>NaN</td>\n      <td>89.66</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>21-01-01</td>\n      <td>24</td>\n      <td>COSTI Immigrant Services</td>\n      <td>40</td>\n      <td>COSTI Reception Centre</td>\n      <td>1103.0</td>\n      <td>COSTI/City North York West Hotel Program</td>\n      <td>1677 Wilson Ave</td>\n      <td>M3L 1A5</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3.0</td>\n      <td>0.0</td>\n      <td>3.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>100.00</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>21-01-01</td>\n      <td>24</td>\n      <td>COSTI Immigrant Services</td>\n      <td>40</td>\n      <td>COSTI Reception Centre</td>\n      <td>1103.0</td>\n      <td>COSTI/City North York West Hotel Program</td>\n      <td>1677 Wilson Ave</td>\n      <td>M3L 1A5</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>28.0</td>\n      <td>0.0</td>\n      <td>23.0</td>\n      <td>5.0</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>82.14</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>21-01-01</td>\n      <td>24</td>\n      <td>COSTI Immigrant Services</td>\n      <td>40</td>\n      <td>COSTI Reception Centre</td>\n      <td>1103.0</td>\n      <td>COSTI/City North York West Hotel Program</td>\n      <td>1677 Wilson Ave</td>\n      <td>M3L 1A5</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>17.0</td>\n      <td>0.0</td>\n      <td>17.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>100.00</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>21-01-01</td>\n      <td>24</td>\n      <td>COSTI Immigrant Services</td>\n      <td>40</td>\n      <td>COSTI Reception Centre</td>\n      <td>1103.0</td>\n      <td>COSTI/City North York West Hotel Program</td>\n      <td>1677 Wilson Ave</td>\n      <td>M3L 1A5</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>14.0</td>\n      <td>0.0</td>\n      <td>13.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>92.86</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>50939</th>\n      <td>50940</td>\n      <td>21-12-31</td>\n      <td>17</td>\n      <td>YWCA Toronto</td>\n      <td>78</td>\n      <td>YWCA-348 Davenport</td>\n      <td>1129.0</td>\n      <td>YWCA Davenport Shelter</td>\n      <td>348 Davenport Road</td>\n      <td>M5R 1K6</td>\n      <td>...</td>\n      <td>6.0</td>\n      <td>14.0</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>30.00</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>50940</th>\n      <td>50941</td>\n      <td>21-12-31</td>\n      <td>31</td>\n      <td>Youth Without Shelter</td>\n      <td>52</td>\n      <td>Youth Without Shelter</td>\n      <td>1064.0</td>\n      <td>Youth Without Shelter</td>\n      <td>6 Warrendale Ct</td>\n      <td>M9V 1P9</td>\n      <td>...</td>\n      <td>23.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>100.00</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>50941</th>\n      <td>50942</td>\n      <td>21-12-31</td>\n      <td>31</td>\n      <td>Youth Without Shelter</td>\n      <td>52</td>\n      <td>Youth Without Shelter</td>\n      <td>1064.0</td>\n      <td>Youth Without Shelter</td>\n      <td>6 Warrendale Ct</td>\n      <td>M9V 1P9</td>\n      <td>...</td>\n      <td>13.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>92.86</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>50942</th>\n      <td>50943</td>\n      <td>21-12-31</td>\n      <td>38</td>\n      <td>YouthLink</td>\n      <td>81</td>\n      <td>YouthLink Shelter</td>\n      <td>1147.0</td>\n      <td>YouthLink</td>\n      <td>747 Warden Ave</td>\n      <td>M1L 4A1</td>\n      <td>...</td>\n      <td>10.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>100.00</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>50943</th>\n      <td>50944</td>\n      <td>21-12-31</td>\n      <td>38</td>\n      <td>YouthLink</td>\n      <td>81</td>\n      <td>YouthLink Shelter</td>\n      <td>1147.0</td>\n      <td>YouthLink</td>\n      <td>747 Warden Ave</td>\n      <td>M1L 4A1</td>\n      <td>...</td>\n      <td>29.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>100.00</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>50944 rows × 32 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ntoronto_shelters_clean = clean_names(toronto_shelters_2021)\ntoronto_shelters_clean.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\nIndex(['_id', 'occupancy_date', 'organization_id', 'organization_name',\n       'shelter_id', 'shelter_group', 'location_id', 'location_name',\n       'location_address', 'location_postal_code', 'location_city',\n       'location_province', 'program_id', 'program_name', 'sector',\n       'program_model', 'overnight_service_type', 'program_area',\n       'service_user_count', 'capacity_type', 'capacity_actual_bed',\n       'capacity_funding_bed', 'occupied_beds', 'unoccupied_beds',\n       'unavailable_beds', 'capacity_actual_room', 'capacity_funding_room',\n       'occupied_rooms', 'unoccupied_rooms', 'unavailable_rooms',\n       'occupancy_rate_beds', 'occupancy_rate_rooms'],\n      dtype='object')\n```\n:::\n:::\n\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\ntoronto_shelters_clean = toronto_shelters_clean[\n    ['occupancy_date', 'occupied_beds']\n]\n```\n:::\n\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\ntoronto_shelters_clean.to_csv('data/toronto_shelters_clean.csv', index=False)\n```\n:::\n\n\n### Explore\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\ntoronto_shelters_clean = pd.read_csv(\n    \"data/toronto_shelters_clean.csv\"\n)\n\ntoronto_shelters_clean['occupancy_date'] = pd.to_datetime(\n    toronto_shelters_clean['occupancy_date'],\n    format='%y-%m-%d'\n)\n\ntoronto_shelters_clean\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>occupancy_date</th>\n      <th>occupied_beds</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2021-01-01</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2021-01-01</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2021-01-01</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2021-01-01</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2021-01-01</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>50939</th>\n      <td>2021-12-31</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>50940</th>\n      <td>2021-12-31</td>\n      <td>23.0</td>\n    </tr>\n    <tr>\n      <th>50941</th>\n      <td>2021-12-31</td>\n      <td>13.0</td>\n    </tr>\n    <tr>\n      <th>50942</th>\n      <td>2021-12-31</td>\n      <td>10.0</td>\n    </tr>\n    <tr>\n      <th>50943</th>\n      <td>2021-12-31</td>\n      <td>29.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>50944 rows × 2 columns</p>\n</div>\n```\n:::\n:::\n\n\nMonthly occupancy. Make this code look a little friendlier. \n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nmonthly_occupancy = (\n    toronto_shelters_clean\n    .assign(occupancy_month=toronto_shelters_clean['occupancy_date'].dt.strftime('%B'))\n    .sort_values('occupancy_date')\n    .dropna(subset=['occupied_beds'])\n    .groupby('occupancy_month')['occupied_beds']\n    .mean()\n    .reset_index()\n    .rename(columns={'occupancy_month': 'Month', 'occupied_beds': 'Average daily number of occupied beds'})\n)\n\nprint(monthly_occupancy.to_markdown(index=False, floatfmt='.1f'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n| Month     |   Average daily number of occupied beds |\n|:----------|----------------------------------------:|\n| April     |                                    26.3 |\n| August    |                                    30.8 |\n| December  |                                    33.5 |\n| February  |                                    27.7 |\n| January   |                                    28.6 |\n| July      |                                    29.7 |\n| June      |                                    28.9 |\n| March     |                                    27.2 |\n| May       |                                    27.4 |\n| November  |                                    33.3 |\n| October   |                                    32.3 |\n| September |                                    31.7 |\n```\n:::\n:::\n\n\n> Toronto has a large unhoused population. Freezing winters mean it is critical there are enough places in shelters. We are interested to understand how usage of shelters changes in colder months, compared with warmer months.\n> We use data provided by the City of Toronto about Toronto shelter bed occupancy. Specifically, at 4 a.m. each night a count is made of the occupied beds. We are interested in averaging this over the month. We cleaned, tidied, and analyzed the dataset using Python and libraries including pandas, numpy, matplotlib, and seaborn. We then made a table of the average number of occupied beds each night for each month.\n> We found that the daily average number of occupied beds was higher in December 2021 than July 2021, with 34 occupied beds in December, compared with 30 in July. More generally, there was a steady increase in the daily average number of occupied beds between July and December, with a slight overall increase each month.\n> The dataset is on the basis of shelters, and so our results may be skewed by changes that are specific to especially large or small shelters. It may be that specific shelters are particularly attractive in colder months. Additionally, we were concerned with counts of the number of occupied beds, but if the supply of beds changes over the season, then an additional statistic of interest would be the proportion occupied.\n\n## Neonatal Mortality\n\n> Neonatal mortality refers to a death that occurs within the first month of life. The neonatal mortality rate (NMR) is the number of neonatal deaths per 1,000 live births (UN IGME 2021). The Third Sustainable Development Goal (SDG) calls for a reduction in NMR to 12. In this example we will create a graph of the estimated NMR for the past 50 years for: Argentina, Australia, Canada, and Kenya.\n\n### Simulate\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nnumber_of_years = 50\n\nsimulated_nmr_data = pd.DataFrame(\n    {\n        'country': np.repeat(['Argentina', 'Australia', 'Canada', 'Kenya'], number_of_years),\n        'year': np.tile(np.arange(1971, 2021), 4),\n        'nmr': np.random.uniform(0, 100, number_of_years * 4)\n    }\n)\n\nprint(simulated_nmr_data.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     country  year        nmr\n0  Argentina  1971  60.124444\n1  Argentina  1972   9.979622\n2  Argentina  1973  38.392210\n3  Argentina  1974  84.556192\n4  Argentina  1975   4.346687\n```\n:::\n:::\n\n\n#### Tests\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nprint(set(simulated_nmr_data['country']) == {'Argentina', 'Australia', 'Canada', 'Kenya'})\nprint(len(simulated_nmr_data['country'].unique()) == 4)\nprint(simulated_nmr_data['year'].min() == 1971)\nprint(simulated_nmr_data['year'].max() == 2020)\nprint(simulated_nmr_data['nmr'].min() >= 0)\nprint(simulated_nmr_data['nmr'].max() <= 1000)\nprint(np.issubdtype(simulated_nmr_data['nmr'].dtype, np.number))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\n```\n:::\n:::\n\n\n### Acquire\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nigme_url = \"https://childmortality.org/wp-content/uploads/2021/09/UNIGME-2021.csv\"\nheaders = {\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3\"\n}\n\nresponse = requests.get(igme_url, headers=headers)\nresponse.raise_for_status() \n```\n:::\n\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nigme_csv = response.content.decode('utf-8')\n\nraw_igme_data = pd.read_csv(StringIO(igme_csv))\nraw_igme_data.sample(10)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_4236/460670154.py:3: DtypeWarning: Columns (6,9,10,20) have mixed types. Specify dtype option on import or set low_memory=False.\n  raw_igme_data = pd.read_csv(StringIO(igme_csv))\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Geographic area</th>\n      <th>Indicator</th>\n      <th>Sex</th>\n      <th>Wealth Quintile</th>\n      <th>Series Name</th>\n      <th>Series Year</th>\n      <th>Regional group</th>\n      <th>TIME_PERIOD</th>\n      <th>OBS_VALUE</th>\n      <th>COUNTRY_NOTES</th>\n      <th>...</th>\n      <th>Age Group of Women</th>\n      <th>Time Since First Birth</th>\n      <th>DEFINITION</th>\n      <th>INTERVAL</th>\n      <th>Series Method</th>\n      <th>LOWER_BOUND</th>\n      <th>UPPER_BOUND</th>\n      <th>STATUS</th>\n      <th>YEAR_TO_ACHIEVE</th>\n      <th>Model Used</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>63056</th>\n      <td>Barbados</td>\n      <td>Infant deaths</td>\n      <td>Male</td>\n      <td>Total</td>\n      <td>UN IGME estimate</td>\n      <td>2021</td>\n      <td>NaN</td>\n      <td>1969-06</td>\n      <td>1.280000e+02</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>1.230000e+02</td>\n      <td>1.340000e+02</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>BSR</td>\n    </tr>\n    <tr>\n      <th>317477</th>\n      <td>Niger</td>\n      <td>Infant mortality rate</td>\n      <td>Female</td>\n      <td>Total</td>\n      <td>UN IGME estimate</td>\n      <td>2021</td>\n      <td>NaN</td>\n      <td>1977-06</td>\n      <td>1.263043e+02</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>1.168229e+02</td>\n      <td>1.366741e+02</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>BSR</td>\n    </tr>\n    <tr>\n      <th>217529</th>\n      <td>Italy</td>\n      <td>Deaths age 15 to 24</td>\n      <td>Total</td>\n      <td>Total</td>\n      <td>UN IGME estimate</td>\n      <td>2021</td>\n      <td>NaN</td>\n      <td>2004-06</td>\n      <td>2.781000e+03</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>2.725000e+03</td>\n      <td>2.837000e+03</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>128551</th>\n      <td>Algeria</td>\n      <td>Under-five deaths</td>\n      <td>Total</td>\n      <td>Middle</td>\n      <td>UN IGME estimate</td>\n      <td>2020</td>\n      <td>NaN</td>\n      <td>2008-06</td>\n      <td>4.442000e+03</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>4.058000e+03</td>\n      <td>4.816000e+03</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>451310</th>\n      <td>Turkey</td>\n      <td>Under-five mortality rate</td>\n      <td>Total</td>\n      <td>Total</td>\n      <td>Demographic and Health Survey 2013 (Direct)</td>\n      <td>2013</td>\n      <td>NaN</td>\n      <td>2010-06</td>\n      <td>1.540000e+01</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>5.0</td>\n      <td>Survey/Census with Full Birth Histories</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>185537</th>\n      <td>Honduras</td>\n      <td>Infant mortality rate</td>\n      <td>Male</td>\n      <td>Total</td>\n      <td>UN IGME estimate</td>\n      <td>2021</td>\n      <td>NaN</td>\n      <td>2005-06</td>\n      <td>2.702694e+01</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>2.444488e+01</td>\n      <td>2.978954e+01</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>BSR</td>\n    </tr>\n    <tr>\n      <th>406572</th>\n      <td>South Sudan</td>\n      <td>Mortality rate age 10-14</td>\n      <td>Total</td>\n      <td>Total</td>\n      <td>UN IGME estimate</td>\n      <td>2021</td>\n      <td>NaN</td>\n      <td>2020-06</td>\n      <td>8.300980e+00</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>6.427805e+00</td>\n      <td>1.068517e+01</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>510681</th>\n      <td>Saint Vincent and the Grenadines</td>\n      <td>Mortality rate age 15-24</td>\n      <td>Total</td>\n      <td>Total</td>\n      <td>UN IGME estimate</td>\n      <td>2021</td>\n      <td>NaN</td>\n      <td>1997-06</td>\n      <td>1.018420e+01</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>9.098660e+00</td>\n      <td>1.142487e+01</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>B3</td>\n    </tr>\n    <tr>\n      <th>474414</th>\n      <td>Sub-Saharan Africa</td>\n      <td>Infant deaths</td>\n      <td>Total</td>\n      <td>Total</td>\n      <td>UN IGME estimate</td>\n      <td>2021</td>\n      <td>UNICEF</td>\n      <td>1998-06</td>\n      <td>2.487715e+06</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>2.448277e+06</td>\n      <td>2.536839e+06</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>410458</th>\n      <td>Suriname</td>\n      <td>Infant mortality rate</td>\n      <td>Male</td>\n      <td>Total</td>\n      <td>Multiple Indicator Cluster Survey 2018 (Direct)</td>\n      <td>2018</td>\n      <td>NaN</td>\n      <td>2015-06</td>\n      <td>2.053527e+01</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>5.0</td>\n      <td>Survey/Census with Full Birth Histories</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>10 rows × 29 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nraw_igme_data.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\nIndex(['Geographic area', 'Indicator', 'Sex', 'Wealth Quintile', 'Series Name',\n       'Series Year', 'Regional group', 'TIME_PERIOD', 'OBS_VALUE',\n       'COUNTRY_NOTES', 'CONNECTION', 'DEATH_CATEGORY', 'CATEGORY',\n       'Observation Status', 'Unit of measure', 'Series Category',\n       'Series Type', 'STD_ERR', 'REF_DATE', 'Age Group of Women',\n       'Time Since First Birth', 'DEFINITION', 'INTERVAL', 'Series Method',\n       'LOWER_BOUND', 'UPPER_BOUND', 'STATUS', 'YEAR_TO_ACHIEVE',\n       'Model Used'],\n      dtype='object')\n```\n:::\n:::\n\n\n> We would like to clean up the names and only keep the rows and columns that we are interested in. Based on our plan, we are interested in rows where \"Sex\" is \"Total\", \"Series Name\" is \"UN IGME estimate\", \"Geographic area\" is one of \"Argentina\", \"Australia\", \"Canada\", and \"Kenya\", and the \"Indicator\" is \"Neonatal mortality rate\". After this we are interested in just a few columns: \"geographic_area\", \"time_period\", and \"obs_value\".\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\ncleaned_igme_data = (\n    clean_names(raw_igme_data)\n    .query('sex == \"Total\" and series_name == \"UN IGME estimate\" and '\n           'geographic_area in [\"Argentina\", \"Australia\", \"Canada\", \"Kenya\"] and '\n           'indicator == \"Neonatal mortality rate\"')\n    [['geographic_area', 'time_period', 'obs_value']]\n)\n\ncleaned_igme_data.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>geographic_area</th>\n      <th>time_period</th>\n      <th>obs_value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>10531</th>\n      <td>Argentina</td>\n      <td>1970-06</td>\n      <td>24.855740</td>\n    </tr>\n    <tr>\n      <th>10532</th>\n      <td>Argentina</td>\n      <td>1971-06</td>\n      <td>24.741421</td>\n    </tr>\n    <tr>\n      <th>10533</th>\n      <td>Argentina</td>\n      <td>1972-06</td>\n      <td>24.633248</td>\n    </tr>\n    <tr>\n      <th>10534</th>\n      <td>Argentina</td>\n      <td>1973-06</td>\n      <td>24.576908</td>\n    </tr>\n    <tr>\n      <th>10535</th>\n      <td>Argentina</td>\n      <td>1974-06</td>\n      <td>24.459251</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n> We need to fix two other aspects: the class of \"time_period\" is string when we need it to be a year, and the name of \"obs_value\" should be \"nmr\" to be more informative.\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\ncleaned_igme_data = (cleaned_igme_data\n    .assign(time_period=lambda x: x['time_period'].str.replace('-06', '').astype(int))\n    .query('time_period >= 1971')\n    .rename(columns={'obs_value': 'nmr', 'time_period': 'year', 'geographic_area': 'country'})\n)\n\nprint(cleaned_igme_data.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         country  year        nmr\n10532  Argentina  1971  24.741421\n10533  Argentina  1972  24.633248\n10534  Argentina  1973  24.576908\n10535  Argentina  1974  24.459251\n10536  Argentina  1975  24.070211\n```\n:::\n:::\n\n\n> Finally, we can check that our dataset passes the tests that we developed based on the simulated dataset.\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nprint(set(cleaned_igme_data['country']) == {'Argentina', 'Australia', 'Canada', 'Kenya'})\nprint(len(cleaned_igme_data['country'].unique()) == 4)\nprint(cleaned_igme_data['year'].min() == 1971)\nprint(cleaned_igme_data['year'].max() == 2020)\nprint(cleaned_igme_data['nmr'].min() >= 0)\nprint(cleaned_igme_data['nmr'].max() <= 1000)\nprint(np.issubdtype(cleaned_igme_data['nmr'].dtype, np.number))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\n```\n:::\n:::\n\n\n> All that remains is to save the nicely cleaned dataset.\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\ncleaned_igme_data.to_csv(\"data/cleaned_igme_data.csv\", index=False)\n```\n:::\n\n\n### Explore\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nplt.figure(figsize=(10, 6))\n\nsns.scatterplot(\n    data=cleaned_igme_data, \n    x='year', \n    y='nmr', \n    hue='country', \n    palette='Set1'\n)\n\nplt.title(\"Neonatal Mortality Rates (NMR)\\nArgentina, Australia, Canada, and Kenya (1971-2020)\\n\", loc='left')\n\nplt.xlabel(\"\")\nplt.ylabel(\"Neonatal Mortality Rate (NMR)\\n\")\n\nplt.legend(\n    title=\"\", \n    loc='lower center', \n    bbox_to_anchor=(0.5, \n    -0.3), \n    ncol=4, \n    frameon=False\n)\n\nplt.tight_layout()\nplt.savefig('figures/Neonatal-Mortality-Rate-Argentina-Australia-Canada-and-Kenya-71-20.png', dpi=300)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_4236/1016042825.py:25: UserWarning: The figure layout has changed to tight\n  plt.tight_layout()\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](firehose_files/figure-pdf/cell-33-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n",
    "supporting": [
      "firehose_files/figure-pdf"
    ],
    "filters": []
  }
}